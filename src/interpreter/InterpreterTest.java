package interpreter;

import java.util.Random;

public class InterpreterTest {
    static Random random = new Random(System.currentTimeMillis());

    static String[][][] tests = {
            {
                    {"(2+2)"},
                    {"(2+((3*4)/5))"},
                    {"(1+((21/2)%(25+12)))"},
                    {"(61*((67+70)%27))"},
                    {"(((((15%55)+(32-40))%(62+(34+30)))-(((54%63)-(57-15))*39))%((((21-11)-16)%(1+15))+(21%43)))"},
                    {"((55/(((11+65)%21)*3))*137)"},
                    {"((129/8)+(80*148))"},
                    {"((114-(64+100))*((128+224)/6))"},
                    {"(250+(251*68))"},
                    {"((1653886+1318547)%((1972426%879801)-(547580+369245)))"},
                    {"(218635+(((10566390%7717)+(385367+1922952))+(714003%(1437334366%780))))"}
            },
            {
                    {"[5]?{62}:{57}"},
                    {"[(7<((39<14)=28))]?{39}:{12}"},
                    {"[68]?{(72%(((666/70)-(63+48))+19))}:{((11-1)/21)}"},
                    {"[((66=30)=20)]?{17}:{(9/60)}"},
                    {"[16]?{45}:{67}"},
                    {"[((45=(25=20))=73)]?{(33-5)}:{72}"},
                    {"[((21=(43>34))=(5<24))]?{39}:{40}"},
                    {"[(((46>33)<(1+41))>(30%(72/68)))]?{18}:{37}"},
                    {"[((19<60)>(50%32))]?{(((1+46)%17)+((71-23)%14))}:{(62*51)}"},
                    {"[(((9>(35%15))=37)>1)]?{(((44-26)%((6+30)+51))*(35/((31*3)-31)))}:{45}"},
                    {"[(30605>(1+2))]?{(((2237+(37469-37395))+(39262*(47254%59266)))+(((18249+49135)/(15646%50384))+(41452%(5951230/73))))}:{8429}"},
                    {"[(((10227=14168)>55548)>1719)]?{53828}:{(51432*2810)}"}
            },
            {
                    {
                            "f(x)={(2*(x*x))}",
                            "f(2)"
                    },
                    {
                            "g(x)={(f(x)+f((x/2)))}",
                            "f(x)={[(x>1)]?{(f((x-1))+f((x-2)))}:{x}}",
                            "g(10)"
                    },
                    {
                            "f(x)={(x*x)}",
                            "g(x,y)={(f(x)+f(y))}",
                            "h(z)={(4*((f(z)+1)+g(z,1)))}",
                            "(h(1)+1)"
                    },
                    {
                            "f(x,y)={(x+y)}",
                            "g(x,y)={(x+y)}",
                            "h(x,y)={(x+y)}",
                            "i(x,y)={(x+y)}",
                            "j(x,y)={(x+y)}",
                            "k(x,y)={(x+y)}",
                            "l(x,y)={(x+y)}",
                            "m(x,y)={(x+y)}",
                            "m(f(g(i(1,2),j(3,4)),h(k(5,6),l(7,8))),1)"
                    },
                    {
                            "kek(x)={lol((x-1))}",
                            "lol(x)={[(x>0)]?{kek((x-10))}:{1337}}",
                            "(kek(100)+lol(99))"
                    },
                    {
                            "factorial(x)={[(x>0)]?{(x*factorial((x-1)))}:{1}}",
                            "select(n,k)={(factorial(n)/(factorial(k)*factorial((n-k))))}",
                            "((select(3,0)+select(3,1))+(select(3,2)+select(3,3)))"
                    },
                    {
                            "powtwo(x)={[(x>0)]?{(2*powtwo((x-1)))}:{1}}",
                            "square(x)={(x*x)}",
                            "powfour(x)={square(powtwo(x))}",
                            "powfour(3)"
                    }
            },
            {
                    {
                            "2 + 2"
                    },
                    {
                            "int n = 1337;"
                    },
                    {
                            "[1>2]?{1lol2}"
                    },
                    {
                            "f(x)={y}",
                            "f(10)"
                    },
                    {
                            "powtwo(x)={[(x>0)]?{(2*powtwo((x-1)))}:{1}}",
                            "square(x)={(x*y)}",
                            "powtwo(square(3))"
                    },
                    {
                            "g(x)={f(x)}",
                            "g(10)"
                    },
                    {
                            "factorial(x)={[(x>0)]?{(x*factorial((x-1)))}:{1}}",
                            "select(n,k)={(factorial(n)/(factorial(k)*factorial((n-k))))}",
                            "((select(3,0)+powtwo(3,1))+(lol(3,2)+kek(3,3)))"
                    },
                    {
                            "g(x)={(x+1)}",
                            "g(10,20)",
                    },
                    {
                            "f(a,b,c,d)={((a+b)+(c+d))}",
                            "f(1)"
                    },
                    {
                            "g(a,b)={(a/b)}",
                            "g(10,0)"
                    },
                    {
                            "((1+2)%(1/(2+3)))"
                    },
                    {
                            "factorial(x)={[(x>0)]?{(x*factorial((x-1)))}:{0}}",
                            "select(n,k)={(factorial(n)/(factorial(k)*factorial((n-k))))}",
                            "((select(3,0)+select(3,1))+(select(3,2)+select(3,3)))"
                    }
            }
    };

    public static void main(String[] args) {
        for (int i = 0; i < tests.length; i++) {
            System.out.println("Tests group " + (i + 1) + ":\n");
            for (int j = 0; j < tests[i].length; j++) {
                System.out.println("Test " + (j + 1) + ":");
                for (String line : tests[i][j]) {
                    System.out.println(" " + line);
                }
                System.out.println(" Answer:\n " + Interpreter.interpretate(tests[i][j]) + "\n");
            }
        }
    }
}
